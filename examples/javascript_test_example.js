#!/usr/bin/env node
/**
 * Example Node.js test script using shared JSON test data.
 * 
 * This demonstrates how the generated test-data.json can be used across 
 * different testing frameworks and languages.
 * 
 * Usage: node javascript_test_example.js <test-data.json> <base_url> [api_key]
 */

const fs = require('fs');
const axios = require('axios');

/**
 * Load test data from JSON file.
 * @param {string} jsonFile - Path to test data JSON file
 * @returns {object} Test data object
 */
function loadTestData(jsonFile) {
    const data = fs.readFileSync(jsonFile, 'utf8');
    return JSON.parse(data);
}

/**
 * Execute a single test case.
 * @param {string} baseUrl - Base URL for the API
 * @param {object} testCase - Test case data from JSON
 * @param {object} headers - Additional headers (e.g., authentication)
 * @returns {Promise<boolean>} True if test passes, false otherwise
 */
async function runTestCase(baseUrl, testCase, headers = {}) {
    const method = testCase.method.toLowerCase();
    const path = testCase.path;
    
    // Build full URL
    let url = `${baseUrl.replace(/\/$/, '')}${path}`;
    
    // Apply path parameters
    const pathParams = testCase.path_params || {};
    for (const [key, value] of Object.entries(pathParams)) {
        url = url.replace(`{${key}}`, value);
    }
    
    // Prepare request configuration
    const config = {
        method: method,
        url: url,
        headers: {
            'Content-Type': 'application/json',
            ...testCase.headers,
            ...headers
        },
        params: testCase.query_params || {},
        validateStatus: () => true // Don't throw on HTTP error status
    };
    
    // Add body for POST/PUT requests
    if (testCase.body) {
        config.data = testCase.body;
    }
    
    try {
        const response = await axios(config);
        
        if (response.status === testCase.expected_status) {
            console.log(`‚úÖ ${testCase.name} - PASSED`);
            return true;
        } else {
            console.log(`‚ùå ${testCase.name} - FAILED: Expected ${testCase.expected_status}, got ${response.status}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå ${testCase.name} - ERROR: ${error.message}`);
        return false;
    }
}

/**
 * Main function to run all test cases.
 */
async function main() {
    if (process.argv.length < 4) {
        console.log('Usage: node javascript_test_example.js <test-data.json> <base_url> [api_key]');
        process.exit(1);
    }
    
    const jsonFile = process.argv[2];
    const baseUrl = process.argv[3];
    const apiKey = process.argv[4];
    
    // Load test data
    let testData;
    try {
        testData = loadTestData(jsonFile);
    } catch (error) {
        console.error(`Error loading test data: ${error.message}`);
        process.exit(1);
    }
    
    // Prepare headers
    const headers = {};
    if (apiKey) {
        headers['api_key'] = apiKey;
    }
    
    // Run test cases
    console.log(`üß™ Running ${testData.metadata.total_cases} test cases...`);
    console.log(`üìä Generated by: ${testData.metadata.generator}`);
    console.log(`üîó Target URL: ${baseUrl}`);
    console.log('-'.repeat(50));
    
    let passed = 0;
    let failed = 0;
    
    for (const testCase of testData.test_cases) {
        if (await runTestCase(baseUrl, testCase, headers)) {
            passed++;
        } else {
            failed++;
        }
    }
    
    console.log('-'.repeat(50));
    console.log(`üìà Results: ${passed} passed, ${failed} failed`);
    
    if (failed > 0) {
        process.exit(1);
    }
}

// Run if this file is executed directly
if (require.main === module) {
    main().catch(error => {
        console.error('Unexpected error:', error);
        process.exit(1);
    });
}
