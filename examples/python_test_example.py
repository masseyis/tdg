#!/usr/bin/env python3
"""
Example Python test script using shared JSON test data.

This demonstrates how the generated test-data.json can be used across 
different testing frameworks and languages.
"""

import json
import requests
import sys
from typing import Dict, Any


def load_test_data(json_file: str) -> Dict[str, Any]:
    """Load test data from JSON file."""
    with open(json_file, 'r') as f:
        return json.load(f)


def run_test_case(base_url: str, test_case: Dict[str, Any], headers: Dict[str, str] = None) -> bool:
    """
    Execute a single test case.
    
    Args:
        base_url: Base URL for the API
        test_case: Test case data from JSON
        headers: Additional headers (e.g., authentication)
        
    Returns:
        True if test passes, False otherwise
    """
    method = test_case['method'].upper()
    path = test_case['path']
    
    # Build full URL
    url = f"{base_url.rstrip('/')}{path}"
    
    # Prepare request parameters
    req_headers = test_case.get('headers', {})
    if headers:
        req_headers.update(headers)
    
    query_params = test_case.get('query_params', {})
    body = test_case.get('body')
    expected_status = test_case['expected_status']
    
    # Apply path parameters
    path_params = test_case.get('path_params', {})
    for key, value in path_params.items():
        url = url.replace(f'{{{key}}}', str(value))
    
    try:
        # Make request
        response = requests.request(
            method=method,
            url=url,
            headers=req_headers,
            params=query_params,
            json=body if body else None
        )
        
        # Check status code
        if response.status_code == expected_status:
            print(f"‚úÖ {test_case['name']} - PASSED")
            return True
        else:
            print(f"‚ùå {test_case['name']} - FAILED: Expected {expected_status}, got {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå {test_case['name']} - ERROR: {e}")
        return False


def main():
    """Run all test cases from JSON file."""
    if len(sys.argv) < 3:
        print("Usage: python python_test_example.py <test-data.json> <base_url> [api_key]")
        sys.exit(1)
    
    json_file = sys.argv[1]
    base_url = sys.argv[2]
    api_key = sys.argv[3] if len(sys.argv) > 3 else None
    
    # Load test data
    try:
        test_data = load_test_data(json_file)
    except Exception as e:
        print(f"Error loading test data: {e}")
        sys.exit(1)
    
    # Prepare headers
    headers = {}
    if api_key:
        headers['api_key'] = api_key
    
    # Run test cases
    print(f"üß™ Running {test_data['metadata']['total_cases']} test cases...")
    print(f"üìä Generated by: {test_data['metadata']['generator']}")
    print(f"üîó Target URL: {base_url}")
    print("-" * 50)
    
    passed = 0
    failed = 0
    
    for test_case in test_data['test_cases']:
        if run_test_case(base_url, test_case, headers):
            passed += 1
        else:
            failed += 1
    
    print("-" * 50)
    print(f"üìà Results: {passed} passed, {failed} failed")
    
    if failed > 0:
        sys.exit(1)


if __name__ == "__main__":
    main()
