{
  "info": {
    "_postman_id": "e2578a59-2983-49b1-937d-af363eb77d5a",
    "name": "OpenAPI Petstore",
    "description": "This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters. For OAuth2 flow, you may use `user` as both username and password when asked to login.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "POST /pet",
      "item": [
        {
          "name": "Valid_addPet_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_addPet_1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_addPet_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_addPet_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_addPet_1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "PUT /pet",
      "item": [
        {
          "name": "Valid_updatePet_0",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_updatePet_1",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_updatePet_0",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_updatePet_0",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_updatePet_1",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "GET /pet/findByStatus",
      "item": [
        {
          "name": "Valid_findPetsByStatus_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/findByStatus",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "findByStatus"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "['available', 'available', 'sold', 'pending', 'available', 'available', 'available', 'sold', 'available', 'sold']"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_findPetsByStatus_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/findByStatus",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "findByStatus"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "['available', 'sold', 'pending', 'available', 'available', 'available', 'available', 'available']"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_findPetsByStatus_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/findByStatus",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "findByStatus"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "['sold', 'available', 'sold', 'available', 'sold', 'sold', 'sold', 'sold']"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_findPetsByStatus_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/findByStatus",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "findByStatus"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "['available', 'pending', 'sold', 'pending', 'available', 'available']"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_findPetsByStatus_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/findByStatus",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "findByStatus"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "['pending', 'pending', 'available', 'available', 'pending', 'available']"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "GET /pet/findByTags",
      "item": [
        {
          "name": "Valid_findPetsByTags_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/findByTags",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "findByTags"
              ],
              "query": [
                {
                  "key": "tags",
                  "value": "['Score each cause. Quality throughout beautiful instead.\\nDespite measure ago current.', 'Stop peace technology officer relate. Product significant world. Term herself law street class.', 'Then fire pretty how trip learn enter. Seat much section investment on.', 'Seem shoulder future fall citizen about reveal. Will seven medical blood personal.', 'She campaign little near enter their institution. Up sense ready require human.', 'Best issue interest level. Pull worker better.', 'Magazine degree husband around her world. Unit size expect recent room.', 'Price north first end prove fire. How public feel first sell.\\nLeader your you. Mrs media car give.', 'Choice example decision garden reach table measure. Town suffer begin interest everybody.', 'Away third tough nation.']"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_findPetsByTags_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/findByTags",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "findByTags"
              ],
              "query": [
                {
                  "key": "tags",
                  "value": "['Agent say forward us soon ten. Environment skin blue the teach.']"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_findPetsByTags_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/findByTags",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "findByTags"
              ],
              "query": [
                {
                  "key": "tags",
                  "value": "[]"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_findPetsByTags_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/findByTags",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "findByTags"
              ],
              "query": [
                {
                  "key": "tags",
                  "value": "['Go meeting quickly such former. Boy wife condition.', 'Mind southern rather. Hair attorney professional form finish. Rest feel finally impact.', 'List top somebody college be middle plan. Behavior weight dog financial southern challenge.', 'Imagine my indeed deal information toward. Watch affect thing offer local wall fear hope.']"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_findPetsByTags_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/findByTags",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "findByTags"
              ],
              "query": [
                {
                  "key": "tags",
                  "value": "['Here deep force seven here.', 'Record short cold parent security boy standard. Blue agent find quality when.', 'Something future they red everybody act. Beat result major serve real.']"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "GET /pet/{petId}",
      "item": [
        {
          "name": "Valid_getPetById_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_getPetById_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_getPetById_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_getPetById_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_getPetById_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "POST /pet/{petId}",
      "item": [
        {
          "name": "Valid_updatePetWithForm_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_updatePetWithForm_1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_updatePetWithForm_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_updatePetWithForm_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_updatePetWithForm_1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "DELETE /pet/{petId}",
      "item": [
        {
          "name": "Valid_deletePet_0",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_deletePet_1",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_deletePet_0",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_deletePet_0",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "api_key",
                "value": "Score each cause. Quality throughout beautiful instead.\nDespite measure ago current."
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_deletePet_1",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "api_key",
                "value": "Stop peace technology officer relate. Product significant world. Term herself law street class."
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "POST /pet/{petId}/uploadImage",
      "item": [
        {
          "name": "Valid_uploadFile_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}/uploadImage",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}",
                "uploadImage"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_uploadFile_1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}/uploadImage",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}",
                "uploadImage"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_uploadFile_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}/uploadImage",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}",
                "uploadImage"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_uploadFile_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}/uploadImage",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}",
                "uploadImage"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_uploadFile_1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pet/{petId}/uploadImage",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "pet",
                "{petId}",
                "uploadImage"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "GET /store/inventory",
      "item": [
        {
          "name": "Valid_getInventory_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/inventory",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "inventory"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_getInventory_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/inventory",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "inventory"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_getInventory_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/inventory",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "inventory"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_getInventory_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/inventory",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "inventory"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_getInventory_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/inventory",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "inventory"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "POST /store/order",
      "item": [
        {
          "name": "Valid_placeOrder_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_placeOrder_1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_placeOrder_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_placeOrder_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_placeOrder_1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "GET /store/order/{orderId}",
      "item": [
        {
          "name": "Valid_getOrderById_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order/{orderId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order",
                "{orderId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_getOrderById_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order/{orderId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order",
                "{orderId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_getOrderById_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order/{orderId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order",
                "{orderId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_getOrderById_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order/{orderId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order",
                "{orderId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_getOrderById_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order/{orderId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order",
                "{orderId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "DELETE /store/order/{orderId}",
      "item": [
        {
          "name": "Valid_deleteOrder_0",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order/{orderId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order",
                "{orderId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_deleteOrder_1",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order/{orderId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order",
                "{orderId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_deleteOrder_0",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order/{orderId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order",
                "{orderId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_deleteOrder_0",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order/{orderId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order",
                "{orderId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_deleteOrder_1",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/store/order/{orderId}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "store",
                "order",
                "{orderId}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "POST /user",
      "item": [
        {
          "name": "Valid_createUser_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_createUser_1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_createUser_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_createUser_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_createUser_1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "POST /user/createWithArray",
      "item": [
        {
          "name": "Valid_createUsersWithArrayInput_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/createWithArray",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "createWithArray"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_createUsersWithArrayInput_1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/createWithArray",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "createWithArray"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_createUsersWithArrayInput_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/createWithArray",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "createWithArray"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_createUsersWithArrayInput_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/createWithArray",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "createWithArray"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_createUsersWithArrayInput_1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/createWithArray",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "createWithArray"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "POST /user/createWithList",
      "item": [
        {
          "name": "Valid_createUsersWithListInput_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/createWithList",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "createWithList"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_createUsersWithListInput_1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/createWithList",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "createWithList"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_createUsersWithListInput_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/createWithList",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "createWithList"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_createUsersWithListInput_0",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/createWithList",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "createWithList"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_createUsersWithListInput_1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/createWithList",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "createWithList"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "GET /user/login",
      "item": [
        {
          "name": "Valid_loginUser_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "login"
              ],
              "query": [
                {
                  "key": "username",
                  "value": "Score each cause. Quality throughout beautiful instead.\nDespite measure ago current."
                },
                {
                  "key": "password",
                  "value": "Stop peace technology officer relate. Product significant world. Term herself law street class."
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_loginUser_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "login"
              ],
              "query": [
                {
                  "key": "username",
                  "value": "Then fire pretty how trip learn enter. Seat much section investment on."
                },
                {
                  "key": "password",
                  "value": "Seem shoulder future fall citizen about reveal. Will seven medical blood personal."
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_loginUser_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "login"
              ],
              "query": [
                {
                  "key": "username",
                  "value": "She campaign little near enter their institution. Up sense ready require human."
                },
                {
                  "key": "password",
                  "value": "Best issue interest level. Pull worker better."
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_loginUser_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "login"
              ],
              "query": [
                {
                  "key": "username",
                  "value": "Magazine degree husband around her world. Unit size expect recent room."
                },
                {
                  "key": "password",
                  "value": "Price north first end prove fire. How public feel first sell.\nLeader your you. Mrs media car give."
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_loginUser_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "login"
              ],
              "query": [
                {
                  "key": "username",
                  "value": "Choice example decision garden reach table measure. Town suffer begin interest everybody."
                },
                {
                  "key": "password",
                  "value": "Away third tough nation."
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "GET /user/logout",
      "item": [
        {
          "name": "Valid_logoutUser_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "logout"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_logoutUser_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "logout"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_logoutUser_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "logout"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_logoutUser_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "logout"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_logoutUser_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "logout"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "GET /user/{username}",
      "item": [
        {
          "name": "Valid_getUserByName_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_getUserByName_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_getUserByName_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_getUserByName_0",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_getUserByName_1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "PUT /user/{username}",
      "item": [
        {
          "name": "Valid_updateUser_0",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_updateUser_1",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_updateUser_0",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_updateUser_0",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_updateUser_1",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "DELETE /user/{username}",
      "item": [
        {
          "name": "Valid_deleteUser_0",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Valid_deleteUser_1",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Boundary_deleteUser_0",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_deleteUser_0",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Negative_deleteUser_1",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{username}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{username}"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Response has valid JSON\", function () {",
                  "        pm.response.to.be.json;",
                  "    });",
                  "",
                  "    // Store ID if present for chaining",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.collectionVariables.set(\"lastCreatedId\", jsonData.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "/v3",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    }
  ]
}